###%***************************************************************************%
###%                                                                          *%                                                                                                                   
###%    Script to run Step 1 of the Cleaving Method with Wells                *%
###%                                                                          *%
###%***************************************************************************%
###%                                                                          *%
###%    Created by:                                                           *%
###%    Nicodemo Di Pasquale                                                  *%
###%    Department of Mathematics                                             *%
###%    University of Leicester                                               *%
###%    24 March 2018                                                         *%
###%                                                                          *%
###%***************************************************************************%

units		lj
atom_style	atomic

boundary p p p
read_data fcc111.lmp
# preS1.data
#inputFCC.lmp            #data.dump # [InputCW.lmp] is a input trajectory file of step1 (wall included)

mass * 1.0

region Rfrz1 prism 0.0 12.6 0.0 11.9 0.4 0.5 0.0 0.0 0.0
region Rfrz2 prism 0.0 12.6 0.0 11.9 33.1 33.2 0.0 0.0 0.0

group highF region Rfrz1
group lowF region Rfrz2
group Freeze union highF lowF
group Free subtract all Freeze

# ---------------------------- Define variables --------------------------------


variable  lam file lambda_wells.dat
variable  cnt        equal  1
variable  backloop   equal  0
variable  rhoc       equal  0.945
variable  fact       equal  1.2
variable  dw         equal  6.0 # pe per atom in liquid
variable  expp       equal  3.0 
variable  eqnts      equal  5000
variable  nts        equal  45000
variable  ts         equal  0.005
variable  siglj      equal  1.0
variable  epslj      equal  1.0
variable  cut1       equal  2.3
variable  cut2       equal  2.5
variable  Tsyst      equal  0.617
variable  Tdump      equal  0.0748
variable  thermofreq equal  20000
variable  Nevery     equal  100
variable  Nrepeat    equal  5
variable  Nfreq      equal  500


# ----- Derivate variables ------

variable lambda equal ${lam}
variable a0 equal exp(1/3*ln(4/${rhoc}))
variable  rrw    equal  sqrt(2)*${a0}/4.0      # nearest neighbour fcc 111
variable  rw    equal ${rrw}*${fact}
variable  cntt  equal  ${cnt}  
variable  cutoff1 equal  ${siglj}*${cut1}
variable  cutoff2 equal  ${siglj}*${cut2}

# ----------------------------- Interactions -----------------------------------

pair_style lj/BG ${cutoff1} ${cutoff2}
pair_coeff   * *  ${epslj} ${siglj}

neighbor     0.3 bin
neigh_modify every 1 delay 0 check yes
atom_modify  sort 0 0.0

# ------------------------- fix atoms  -------------------------------

velocity Free create ${Tsyst} 93874090 
velocity all zero linear
velocity all zero angular
velocity Freeze set 0.0 0.0 0.0
fix f1 Freeze setforce 0.0 0.0 0.0 

# ------------- Output thermo information and averaged variables ---------------

thermo    ${thermofreq}
timestep  ${ts}

# --------------- Dumping trajectories and store restart file ------------------

#dump        Dp1 all xyz 20000 dump/dump.*.xyz
#restart   30000 X.restart/X.restart


# -------------------------- Zero linear momentum ------------------------------

fix    f3  Free momentum 1 linear 1 1 1

# -----------------------   Set sim   ----------------------------

fix f4 all nvt temp ${Tsyst} ${Tsyst} ${Tdump}

# ----------------------- increasing interactions wells ------------------------


label here
include    in.loop/loop
write_data data/Fstep1.${cnt}.data nocoeff
variable    cntt equal ${cnt}+1
variable    cnt  equal ${cntt}
next lam
jump SELF here

# ----------------------- backloop ------------------------

if " ${backloop} == 0 " then "quit"

variable cnt equal 1
variable lam file lambda_wells_backloop.dat
label hereB
include    in.loop/loop.back
write_data data/Bstep1.${cnt}.data nocoeff
variable    cntt equal ${cnt}+1
variable    cnt  equal ${cntt}
next lam
jump SELF hereB
